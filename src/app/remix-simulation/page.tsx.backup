'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { useRouter } from 'next/navigation'
import { SimulationState, HandleTurnResponse, Archetype } from '@/lib/types'
import { QUESTIONS, INITIAL_SCENE, getArchetypeFromPath } from '@/lib/scenarios/remix'

export default function RemixSimulationPage() {
  const [simulationState, setSimulationState] = useState<SimulationState>({
    currentTurn: 1,
    storySoFar: `SCENE: ${INITIAL_SCENE}`,
    userPath: [],
    userActions: []
  })
  
  const [isComplete, setIsComplete] = useState(false)
  const [showConclusion, setShowConclusion] = useState(false)
  const [conclusionText, setConclusionText] = useState('')
  const [conclusionPage, setConclusionPage] = useState(1)
  const [currentSceneText, setCurrentSceneText] = useState(INITIAL_SCENE)
  const [userInput, setUserInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [errorMessage, setErrorMessage] = useState('')
  const [currentPage, setCurrentPage] = useState(1) // Track which page of Turn 1 we're on
  const [textComplete, setTextComplete] = useState(false)

  const handleSubmitInput = async () => {
    if (!userInput.trim()) return
    
    setIsLoading(true)
    setErrorMessage('')

    try {
      const response = await fetch('/api/handleTurn', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userInput: userInput.trim(),
          storySoFar: simulationState.storySoFar,
          scenarioType: 'remix',
          currentTurn: simulationState.currentTurn
        })
      })

      const result: HandleTurnResponse = await response.json()

      if (result.status === 'needs_retry') {
        setErrorMessage(result.errorMessage || 'Please try again')
        setIsLoading(false)
        return
      }

      if (result.status === 'success' && result.classification && result.actionSummary && result.nextSceneText) {
        // Update simulation state
        const newStorySoFar = `${simulationState.storySoFar}\nUSER'S ACTION: "${userInput.trim()}"\nNARRATIVE CONTINUATION: "${result.nextSceneText}"`
        
        const newState: SimulationState = {
          currentTurn: simulationState.currentTurn + 1,
          storySoFar: newStorySoFar,
          userPath: [...simulationState.userPath, result.classification],
          userActions: [...simulationState.userActions, result.actionSummary]
        }

        setSimulationState(newState)
        setCurrentSceneText(result.nextSceneText)
        setUserInput('')
        setCurrentPage(1) // Reset page when moving to next turn
        setTextComplete(false) // Reset text animation for new turn

        // Check if simulation is complete
        if (simulationState.currentTurn === 3) {
          // Generate conclusion after Turn 3
          await generateConclusion(newState)
        }
      }
    } catch (error) {
      setErrorMessage('Network error. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const generateConclusion = async (finalState: SimulationState) => {
    try {
      setIsLoading(true)
      const response = await fetch('/api/generateConclusion', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          storySoFar: finalState.storySoFar,
          userActions: finalState.userActions,
          scenarioType: 'remix'
        })
      })

      const result = await response.json()

      if (result.status === 'success' && result.conclusionText) {
        setConclusionText(result.conclusionText)
        setConclusionPage(1) // Reset to first conclusion page
        setShowConclusion(true)
        setTextComplete(false) // Reset for conclusion animation
      } else {
        setErrorMessage('Failed to generate conclusion. Please try again.')
      }
    } catch (error) {
      setErrorMessage('Network error. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleUnlockArchetype = () => {
    setShowConclusion(false)
    setIsComplete(true)
  }

  const handleConclusionNext = () => {
    if (conclusionPage < 2) {
      setConclusionPage(conclusionPage + 1)
      setTextComplete(false) // Reset animation for next page
    }
  }

  const getCurrentPageNumber = () => {
    if (showConclusion) {
      return 7 + conclusionPage // Conclusion pages 8-9
    }
    
    if (simulationState.currentTurn === 1) {
      return currentPage // Pages 1-3
    } else if (simulationState.currentTurn === 2) {
      return 3 + currentPage // Pages 4-5
    } else if (simulationState.currentTurn === 3) {
      return 5 + currentPage // Pages 6-7
    }
    return 1
  }

  const getConclusionPageContent = () => {
    if (!conclusionText) return ""
    
    // Split the conclusion into paragraphs
    const paragraphs = conclusionText.split(/PARAGRAPH\d+:\s*/).filter(p => p.trim())
    
    if (conclusionPage === 1) {
      return paragraphs[0]?.trim() || ""
    } else if (conclusionPage === 2) {
      return paragraphs[1]?.trim() || ""
    }
    return ""
  }

  const getTurn1PageContent = () => {
    if (currentPage === 1) {
      return `You and two friends have been making music together for months. Last night, you remixed a popular song that's been stuck in your head. You stayed up until 4AM, perfecting every beat. You posted it online this morning.

It blew up. 2 million views. Comments exploding. Your phone won't stop buzzing.`
    } else if (currentPage === 2) {
      return `But there's a problem. You used the original song's audio without permission.

In between the praise, the comments start shifting: "This is genius." "Wait... isn't this copyright infringement?"

Notifications keep flooding inâ€”only now, they carry a different weight.`
    } else if (currentPage === 3) {
      return "Casey: \"Should we be worried about this copyright thing?\""
    }
    return ""
  }

  const getTurn2PageContent = () => {
    if (currentPage === 1) {
      return currentSceneText // This will be the AI-generated response based on Turn 1 input
    } else if (currentPage === 2) {
      return "The situation gets crazier. A major record label DMs you: 'We love your remix. We want to sign you for an official release, but we need to move fast - the hype window is short. Can you get permission from the original artist by tomorrow?'"
    }
    return ""
  }

  const getTurn3PageContent = () => {
    if (currentPage === 1) {
      return currentSceneText // This will be the AI-generated response based on Turn 2 input
    } else if (currentPage === 2) {
      return "Plot twist: The original artist's manager emails you. They're not angry - they want to collaborate! But they want to re-record the whole thing 'properly' in a studio. This would take at least two weeks and kill your current viral momentum."
    }
    return ""
  }

  const getCurrentQuestion = () => {
    if (simulationState.currentTurn === 1) {
      return "" // No question for Turn 1 pages 1 and 2, only page 3 has input
    } else if (simulationState.currentTurn === 2) {
      return "" // No question for Turn 2 page 1, only page 2 has input
    } else if (simulationState.currentTurn === 3) {
      return "" // No question for Turn 3 page 1, only page 2 has input
    }
    return QUESTIONS[simulationState.currentTurn - 1]
  }

  const getPlaceholderText = () => {
    if (simulationState.currentTurn === 1) {
      return "What will you respond to Casey with?"
    } else if (simulationState.currentTurn === 2) {
      return "What do you respond to them with?"
    } else {
      return "Type your response here..."
    }
  }

  const handleNextPage = () => {
    if (simulationState.currentTurn === 1 && currentPage < 3) {
      setCurrentPage(currentPage + 1)
      setTextComplete(false) // Reset text animation for new page
    } else if (simulationState.currentTurn === 2 && currentPage < 2) {
      setCurrentPage(currentPage + 1)
      setTextComplete(false) // Reset text animation for new page
    } else if (simulationState.currentTurn === 3 && currentPage < 2) {
      setCurrentPage(currentPage + 1)
      setTextComplete(false) // Reset text animation for new page
    }
  }

  if (isComplete) {
    return <ResultsDisplay simulationState={simulationState} />
  }

  if (showConclusion) {
    return (
      <div className="h-full bg-white flex flex-col">
        <ProgressBar currentPage={getCurrentPageNumber()} />
        
        <div className="flex-1 flex flex-col p-8 pt-12">
          <div className="w-full max-w-2xl mx-auto flex-1 flex flex-col">
            {/* Conclusion Text */}
            <div className="mt-8 mb-auto">
              <AnimatedText 
                text={getConclusionPageContent()}
                onComplete={() => setTextComplete(true)}
              />
            </div>

            {/* Navigation Buttons */}
            {textComplete && (
              <div className="mt-auto">
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.6 }}
                  className="space-y-4"
                >
                  {conclusionPage < 2 ? (
                    <button
                      onClick={handleConclusionNext}
                      className="w-full bg-orange-500 text-white px-8 py-3 text-base font-light rounded-lg hover:bg-orange-600 transition-all duration-200"
                    >
                      Continue
                    </button>
                  ) : (
                    <button
                      onClick={handleUnlockArchetype}
                      disabled={isLoading}
                      className="w-full bg-orange-500 text-white px-8 py-3 text-base font-light rounded-lg hover:bg-orange-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isLoading ? 'Processing...' : 'Unlock Archetype'}
                    </button>
                  )}
                </motion.div>
              </div>
            )}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="h-full bg-white flex flex-col">
      <ProgressBar currentPage={getCurrentPageNumber()} />
      
      <div className="flex-1 flex flex-col p-8 pt-12">
        <div className="w-full max-w-2xl mx-auto flex-1 flex flex-col">
          {/* Scene Text - positioned towards top with some padding */}
          <div className="mt-8 mb-auto">
            <AnimatedText 
              text={
                simulationState.currentTurn === 1 
                  ? getTurn1PageContent() + (currentPage === 3 ? "\n\nWhat do you text back?" : "")
                  : simulationState.currentTurn === 2 
                    ? getTurn2PageContent() + (currentPage === 2 ? "\n\nWhat do you respond to them with?" : "")
                    : simulationState.currentTurn === 3
                      ? getTurn3PageContent() + (currentPage === 2 ? "\n\nWhat's your call?" : "")
                      : currentSceneText
              }
              onComplete={() => setTextComplete(true)}
            />
          </div>

          {/* Bottom section - always at bottom */}
          {textComplete && (
            <div className="mt-auto">
              {/* Input Area - only show for Turn 1 page 3, Turn 2 page 2, or Turn 3 page 2 */}
              {(simulationState.currentTurn === 1 && currentPage === 3) || 
               (simulationState.currentTurn === 2 && currentPage === 2) || 
               (simulationState.currentTurn === 3 && currentPage === 2) ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.6 }}
                  className="space-y-4"
                >
                  <textarea
                    value={userInput}
                    onChange={(e) => setUserInput(e.target.value)}
                    placeholder={getPlaceholderText()}
                    className="w-full h-32 p-4 border border-gray-200 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-gray-300 text-base"
                    disabled={isLoading}
                  />
                  
                  {errorMessage && (
                    <div className="text-red-600 text-sm">
                      {errorMessage}
                    </div>
                  )}

                  <button
                    onClick={handleSubmitInput}
                    disabled={isLoading || !userInput.trim()}
                    className="w-full bg-orange-500 text-white px-8 py-3 text-base font-light rounded-lg hover:bg-orange-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isLoading ? 'Processing...' : 'Submit Response'}
                  </button>
                </motion.div>
              ) : (
                /* Continue button for Turn 1 pages 1-2, Turn 2 page 1, and Turn 3 page 1 - always at bottom */
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.6 }}
                  className="space-y-4"
                >
                  <button
                    onClick={handleNextPage}
                    className="w-full bg-orange-500 text-white px-8 py-3 text-base font-light rounded-lg hover:bg-orange-600 transition-all duration-200"
                  >
                    Continue
                  </button>
                </motion.div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

function ProgressBar({ currentPage }: { currentPage: number }) {
  const totalPages = 9 // 3+2+2+2 pages total
  
  return (
    <div className="w-full p-2">
      <div className="flex gap-1">
        {Array.from({ length: totalPages }, (_, index) => {
          const isActive = index < currentPage
          
          return (
            <div key={index} className="flex-1">
              <motion.div
                className={`h-1 rounded-full ${isActive ? 'bg-orange-500' : 'bg-gray-200'}`}
                initial={{ backgroundColor: isActive ? '#f97316' : '#e5e7eb' }}
                animate={{ backgroundColor: isActive ? '#f97316' : '#e5e7eb' }}
                transition={{ duration: 0.5, ease: "easeOut" }}
              />
            </div>
          )
        })}
      </div>
    </div>
  )
}

function AnimatedText({ text, onComplete }: { text: string, onComplete: () => void }) {
  const [displayedText, setDisplayedText] = useState('')
  const [currentIndex, setCurrentIndex] = useState(0)

  useEffect(() => {
    // Reset animation when text changes
    setDisplayedText('')
    setCurrentIndex(0)
  }, [text])

  useEffect(() => {
    const timer = setInterval(() => {
      if (currentIndex < text.length) {
        setDisplayedText(text.slice(0, currentIndex + 1))
        setCurrentIndex(currentIndex + 1)
      } else {
        clearInterval(timer)
        onComplete()
      }
    }, 20) // Typing speed - adjust as needed

    return () => clearInterval(timer)
  }, [currentIndex, text, onComplete])

  return (
    <div className="text-lg font-light text-gray-800 leading-relaxed text-left max-w-2xl mx-auto whitespace-pre-line">
      {displayedText}
    </div>
  )
}

function ResultsDisplay({ simulationState }: { simulationState: SimulationState }) {
  const router = useRouter()
  const archetype: Archetype = getArchetypeFromPath(simulationState.userPath)
  const [textComplete, setTextComplete] = useState(false)
  
  // Safety check with detailed debugging
  if (!archetype) {
    console.error('=== ARCHETYPE DEBUG ===')
    console.error('Raw userPath:', simulationState.userPath)
    console.error('userPath length:', simulationState.userPath?.length)
    console.error('userPath contents:', JSON.stringify(simulationState.userPath))
    console.error('Momentum count:', simulationState.userPath?.filter(c => c === "Momentum").length)
    console.error('Method count:', simulationState.userPath?.filter(c => c === "Method").length)
    console.error('=== END DEBUG ===')
    return <div>Error loading results. Please try again.</div>
  }

  const resultsText = `${archetype.emoji}

${archetype.name}

${archetype.flavorText}`
  
  return (
    <div className="h-full bg-white flex flex-col">
      <div className="flex-1 flex flex-col p-8 pt-12">
        <div className="w-full max-w-2xl mx-auto flex-1 flex flex-col">
          {/* Results Text - positioned towards top */}
          <div className="mt-8 mb-auto">
            <AnimatedText 
              text={resultsText}
              onComplete={() => setTextComplete(true)}
            />
          </div>

          {/* Try Another Scenario Button */}
          {textComplete && (
            <div className="mt-auto">
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.6 }}
                className="space-y-4"
              >
                <button
                  onClick={() => router.push('/scenarios')}
                  className="w-full bg-orange-500 text-white px-8 py-3 text-base font-light rounded-lg hover:bg-orange-600 transition-all duration-200"
                >
                  Try Another Scenario
                </button>
              </motion.div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}